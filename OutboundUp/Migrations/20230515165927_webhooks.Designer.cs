// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutboundUp.Database;

#nullable disable

namespace OutboundUp.Migrations
{
    [DbContext(typeof(OutboundUpDbContext))]
    [Migration("20230515165927_webhooks")]
    partial class webhooks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("OutboundUp.Models.OutboundWebHook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OutboundWebHooks");
                });

            modelBuilder.Entity("OutboundUp.Models.OutboundWebhookResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeedTestResultId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SpeedTestResultId");

                    b.ToTable("OutboundWebHookResult");
                });

            modelBuilder.Entity("OutboundUp.Models.SpeedTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DownloadLatencyAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadLatencyHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadLatencyLow")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadSpeed")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PingAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("PingHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("PingLow")
                        .HasColumnType("REAL");

                    b.Property<string>("ServerHostName")
                        .HasColumnType("TEXT");

                    b.Property<long>("UnixTimestampMs")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UploadLatencyAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadLatencyHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadLatencyLow")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SpeedTestResults");
                });

            modelBuilder.Entity("OutboundUp.Models.OutboundWebhookResult", b =>
                {
                    b.HasOne("OutboundUp.Models.OutboundWebHook", "WebHook")
                        .WithMany("Results")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutboundUp.Models.SpeedTestResult", "SpeedTestResult")
                        .WithMany()
                        .HasForeignKey("SpeedTestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpeedTestResult");

                    b.Navigation("WebHook");
                });

            modelBuilder.Entity("OutboundUp.Models.OutboundWebHook", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
