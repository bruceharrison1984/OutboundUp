// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutboundUp.Database;

#nullable disable

namespace OutboundUp.Migrations
{
    [DbContext(typeof(OutboundUpDbContext))]
    [Migration("20230512155104_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("OutboundUp.SpeedTests.SpeedTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DownloadLatencyAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadLatencyHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadLatencyLow")
                        .HasColumnType("REAL");

                    b.Property<double>("DownloadSpeed")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PingAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("PingHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("PingLow")
                        .HasColumnType("REAL");

                    b.Property<string>("ServerHostName")
                        .HasColumnType("TEXT");

                    b.Property<long>("UnixTimestampMs")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UploadLatencyAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadLatencyHigh")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadLatencyLow")
                        .HasColumnType("REAL");

                    b.Property<double>("UploadSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SpeedTestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
